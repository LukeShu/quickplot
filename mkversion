#!/bin/sh

# This is an interactive script.  This is used just to edit CONFIG
# and optionally edits ChangeLog.  Use `make dist' to make the release.
# You can also directly edit CONFIG.  This just keeps your version
# numbers in a consist sequence.


########################################################################
# This block was taken from Daniel Elstner's autogen.sh.
########################################################################
dir=`echo "$0" | sed 's,[^/]*$,,'`
test "x${dir}" = "x" && dir='.'
if test "x`cd "${dir}" 2>/dev/null && pwd`" != "x`pwd`"
then
    echo "This script ($0) must be executed directly from the source directory."
    exit 1
fi
# end taken from Daniel Elstner
########################################################################


# get PACKAGE, TARNAME, VERSION_MAJOR, VERSION_MINOR,
# VERSION_MICRO, EBUILD_CATEGORY_DIR, EMAIL, and HOMEPAGE
. CONFIG


echo "Generating the release version number for:"
echo "  ${PACKAGE} (${TARNAME})"
echo "  in the form major#.minor#.micro#"
echo
echo "The previous ${TARNAME} version was \"$VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO\""


make_version()
{
  echo "making ${TARNAME} version number be \"$VERSIO_MAJOR.$VERSION_MINOR.$VERSION_MICRO\""
  rm -f CONFIG RELEASE_DATE
cat <<EOF >> CONFIG
# CONFIG   Generated by $0 with the old copy of CONFIG
# on `date`


# PACKAGE is the long package name.
# PACKAGE can have spaces in it, but cannot have a ' in it.
PACKAGE="${PACKAGE}"


# TARNAME is the short package name that is used for file names like
# in ${TARNAME}-${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_MICRO}.tar.gz.
# TARNAME cannot have white space in it.  TARNAME is also the ebuild name.
TARNAME="${TARNAME}"


# Current version numbers
VERSION_MAJOR=${VERSION_MAJOR}
VERSION_MINOR=${VERSION_MINOR}
VERSION_MICRO=${VERSION_MICRO}
VERSION=\${VERSION_MAJOR}.\${VERSION_MINOR}.\${VERSION_MICRO}

# EBUILD_CATEGORY_DIR is used to make an ebuild for Gentoo GNU/Linux.
# Just egnore this if your not using Gentoo portage.
# This is the directory where to put the ebuild files.
# On a Gentoo GNU/Linux system see files /usr/portage/*.
EBUILD_CATEGORY_DIR="${EBUILD_CATEGORY_DIR}"

EMAIL="${EMAIL}"
HOMEPAGE="${HOMEPAGE}"

EOF


  echo -n "Do you wish to edit ChangeLog (y/n) [y]? "
  read a
  case $a in
    N* | n*)
      exit 0
   ;;
  esac

  mv ChangeLog ChangeLog_tmp &&\
  echo "`date +%F\"   \"%R\" \"%Z`   Version $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO   `id -un`" > ChangeLog &&\
  echo >> ChangeLog &&\
  cat ChangeLog_tmp >> ChangeLog &&\
  rm ChangeLog_tmp

# if they have the EDITOR environment variable set than use it.
  editor="emacs"
  if [ "${EDITOR}" != "" ]
  then
    editor="${EDITOR}"
  fi

# one of these editors may work
  $editor ChangeLog || emacs ChangeLog || vim ChangeLog || nano ChangeLog \
  || nedit ChangeLog || joe ChangeLog || vi ChangeLog \
  || kedit ChangeLog || gedit ChangeLog || jot ChangeLog \
  || notepad ChangeLog

  exit 0
}

check_input()
{
  read a
  case $a in
    Y* | y*)
      make_version
   ;;
  esac
}


let VERSION_MICRO=$VERSION_MICRO+1
echo -n "Is this a \"micro\" (edit) release version $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO (y/n) [n]? "
check_input
VERSION_MICRO=0

let VERSION_MINOR=$VERSION_MINOR+1
echo -n "Is this a \"minor\" release version $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO (y/n) [n]? "
check_input
VERSION_MINOR=0

let VERSION_MAJOR=$VERSION_MAJOR+1
echo -n "Is this a \"major\" release version $VERSION_MAJOR.$VERSION_MINOR.$VERSION_MICRO (y/n) [n]? "
check_input

                                                       
echo
echo "No Change in ${TARNAME} version number."
echo
exit 1
